accalon

distributed processing system
for message passing based raytrace rendering and simulation

because the simulated world may be large and span multiple processors / machines
shared memory won't be possible past a certian size.

each web worker or node will handle simulation of rays and objects in the area
of the oct tree assigned to it.

when rays are cast/simulated they will be checked for interactions in a node
and then if they continue move to the next adjacent node
interactions once sufficently approximated return along the path they are
cast from to the sender/querant for image formation / use

caching of pre rendered scenarios - apply encoding / lookup table generation
and slow communication between nodes to check if any complex things have
been already calculated (if they have been pass/share the output to the other
nodes to avoid them having to re calculate them)

scaling of objects - the oct tree applies to multiple resolution levels (the
entire model is subdivided by an oct tree)
depending on the ray only a few levels can be descended to (as a ray gets further
away it is satisfied with returning a rough approximation of the model (averaged normal
and course voxelized opacity)

it is the angular area that determines the error caused by level of detail


rays should be cast in packets/bundles (so they have a angular area related to
the adjacent rays) and so fewer postMessage calls are passed between processces
